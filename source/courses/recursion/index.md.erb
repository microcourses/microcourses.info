---
title: Recursion
duration: 2 hours
stream: ruby
layout: course
requirements:
  - pen and paper
  - ruby command
  - functions
concepts:
  - base case
  - recursive case
challenge: The (evil) government introduces 14 dollar notes. Update your program.
---

A **recursive function** is one that calls itself using its own name.
Today you will use such a function to build an ATM stocked with 50 and 20 dollar notes.
The algorithm you will implement is called **backtracking**.

These are the steps a backtracking search goes through to give somebody $70:

| step  | notes     | remainder  | solution?  |
| ----  | --------  | ---------  | ---------  |
| 1     | -         | 70         | no         |
| 2     | 50        | 20         | no         |
| 3     | 50,20     | 0          | yes        |

These are the steps for $80:

| step  | notes        | remainder  | solution?  |
| ----  | --------     | ---------  | ---------  |
| 1     | -            | 80         | no         |
| 2     | 50           | 30         | no         |
| 3     | 50,20        | 10         | no         |
| 4     | 20           | 50         | no         |
| 5     | 20,50        | 10         | no         |
| 6     | 20,20        | 40         | no         |
| 7     | 20,20,20     | 20         | no         |
| 8     | 20,20,20,20  | 0          | yes        |

The code below is a partial solution with some passing tests and some failing
tests. Copy this code into a file named `atm.rb` and run it with the command
`ruby atm.rb -v`. Make all the tests pass!

<%= file('atm.rb', 'ruby') %>
